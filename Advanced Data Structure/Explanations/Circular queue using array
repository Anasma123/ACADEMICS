Hereâ€™s a step-by-step explanation of the code:

1. Global Variables:

#define MAX 5
int queue[MAX];
int front = -1, rear = -1;

#define MAX 5: This defines the maximum size of the queue as 5.

queue[MAX]: This array will store the queue elements.

front and rear: These variables track the front and rear positions of the queue. Initially, both are set to -1, indicating that the queue is empty.



---

2. isFull() Function:

int isFull() {
    if ((rear + 1) % MAX == front) {
        return 1;
    }
    return 0;
}

Purpose: Checks if the queue is full.

Logic: In a circular queue, when rear reaches the position just before front, it means the queue is full. The condition (rear + 1) % MAX == front checks if the next position after rear would be front, indicating the queue is full.



---

3. isEmpty() Function:

int isEmpty() {
    if (front == -1) {
        return 1;
    }
    return 0;
}

Purpose: Checks if the queue is empty.

Logic: If front is -1, it means no elements have been added to the queue yet, so the queue is empty.



---

4. enqueue() Function:

void enqueue(int value) {
    if (isFull()) {
        printf("Queue is full! Cannot insert %d.\n", value);
    } else {
        if (front == -1) {
            front = 0;
        }
        rear = (rear + 1) % MAX;
        queue[rear] = value;
        printf("%d inserted into queue.\n", value);
    }
}

Purpose: Adds a new element to the queue.

Logic:

First, it checks if the queue is full using isFull(). If full, it prints a message.

If the queue is not full, it checks if the queue is empty (front == -1). If so, it sets front = 0.

Then, it updates rear using the circular index formula (rear + 1) % MAX. This allows the rear index to wrap around to the beginning if needed.

The value is added to the queue at the rear position.




---

5. dequeue() Function:

void dequeue() {
    if (isEmpty()) {
        printf("Queue is empty! Cannot perform dequeue.\n");
    } else {
        int value = queue[front];
        if (front == rear) {
            front = rear = -1;
        } else {
            front = (front + 1) % MAX;
        }
        printf("%d deleted from queue.\n", value);
    }
}

Purpose: Removes an element from the queue.

Logic:

First, it checks if the queue is empty using isEmpty(). If empty, it prints a message.

If not empty, it removes the element at the front of the queue.

If the front and rear are the same, it means the queue has only one element, so it sets both front and rear to -1, indicating the queue is now empty.

Otherwise, it moves front forward by one position using (front + 1) % MAX, ensuring that it wraps around when needed.




---

6. display() Function:

void display() {
    if (isEmpty()) {
        printf("Queue is empty! Nothing to display.\n");
    } else {
        printf("Queue elements: ");
        int i = front;
        while (i != rear) {
            printf("%d ", queue[i]);
            i = (i + 1) % MAX;
        }
        printf("%d\n", queue[rear]);
    }
}

Purpose: Displays the current elements in the queue.

Logic:

If the queue is empty, it prints a message.

If not, it prints all the elements from front to rear. It uses a while loop to go from front to rear in circular fashion using (i + 1) % MAX.




---

7. main() Function:

int main() {
    int choice, value;

    while (1) {
        printf("\nCircular Queue Operations:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to insert: ");
                scanf("%d", &value);
                enqueue(value);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}

Purpose: Provides the main control loop for the program where the user can choose different operations (enqueue, dequeue, display, or exit).

Logic:

A loop runs indefinitely until the user chooses to exit by selecting option 4.

It asks the user to select an option and performs the corresponding operation using a switch statement.

If the user selects an invalid option, it displays an error message.




---

